* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
	-moz-box-sizing: border-box;
	-webkit-box-sizing: border-box;
}
body {
	background: #f2f2f2;
	font-family: Arial, sans-serif;

}

.contenedor {
	width: 80%;
	max-width: 700px;
	height: 500px;
	background: #212d40;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;

	/*flex-flow: row wrap; combina los dos anteriores*/

	justify-content: space-between;

	/*align-items: center;*/
	/*align-content: center; como aling items pero 
	cuando hay mas contenido hijos y hay mas de una linea de items. (se usa o uno o el otro. item o content) ejemplo:  align content :space-around
	desacive esto para poder usar align-self: flex-end; por ejemplo  ;
	*/


}
/*#    trabajamos con los elementos hijos ahora*/
.caja {
	width: 100px;/*para otro ejemplo 150px*/
	height: 100px;
	background: #f79256;
	text-align: center;
	margin: 20px;
	padding: 20px;
	font-size: 40px;
	color: #fff;
	/*order: 1; abajo lo probamos con otra clase*/

	/*flex-grow:1 ;La propiedad flex-grow de CSS especifica el factor de crecimiento de un elemento flexible.
	 Se especifica qué cantidad de espacio debe ocupar el elemento dentro del contenedor flexible.

	 en el ejemplo los elementos hijos 1,2,3 no superan los 150px del contenedor padre, pero como el item 4 no entra se pone abajo. como le
	  pusimos flex grow 1 este 4to item ocupa el 100% del ancho del contenedor padre.

 	si quieres que ocupe todo el espacio disponoble ponle flex grow 1

 	y si los quieres alinear en el contenedor padre debe estar ((((align content))))))*/



 	/*flex-shrink: 0; si quieres que un elemento no se pueda hacer mas pequeños que
 	 200px por ejemplo poner asi como en la clase .shrink de abajo) y ponerle esta clase a uno de las cajas del html
 	*/





 	flex: 1 1 auto;/*como tiene el 1er uno el elem 4 ocupa todo el ancho en otra resolucion*/
 	/*flex: 1 1 auto; poner asi por defecto*/
}

.ubicacionUno {
	order: 1; /*order es para ordenar segun su valor . se usa para diseños responsive, cuando se va cambiando de resolucion, se puede cambiar el orden de los items hijos.*/

}

.ubicacionDos {
	order: 2;
}

.ubicacionTres {
	order: 3;
}

/*.shrink {
	flex-shrink: 0;
	width: 200px;
	flex-basis: 200px;/*es como el width´pero definimos el valor inicial de un elemento
	flex-grow:2 ;/*otro ejemplo de flex grow. es si ponemos 2 a este elemento, le 
	estariamos diciendo que si el elemento o caja 1 crece 1pixel, este crezca 2pixeles


	flex: 1 1 auto; esto seria estos 3 simplificados. es comun verlo asi.

	el primer 1 es la proporcion de 1 para crecer
	1 para hacerse mas pequeño
	y el auto es para tamaño automatico
}*/

.alignSelfEjemplo {
	/*align-self: flex-end; otra forma de alinear. como align item y align content. pero este 
	es para solo UNO*/
	align-self: stretch;/*poner un alto automatico*/
	height: auto;
}

